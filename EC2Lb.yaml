AWSTemplateFormatVersion: 2010-09-09
# Description: This is a CloudFormation template to create the following infrastructure in AWS.

Parameters:
  EnvironmentName:
    Description: Name of the Loadbalancer enviornment
    Type: String
    Default: CodeChallenge

  SSHKeyName:
    Description: Name of the EC2 key
    Type: AWS::EC2::KeyPair::KeyName
    Default: ts

  ec2-image:
    Description: Ingrea el codigo de la AMi que deseas Instalar
    Type: AWS::EC2::Image::Id
    Default: ami-0c0a1cc13a52a158f


Resources:

  # EC2 Security Group Allowing Port 22 and 80 from anywhere

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SSH and Port 80"
      VpcId: 
        Fn::ImportValue: vpc2nd
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0


  # ELB Security Group allowing Port 80 from anywhere
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    # DependsOn: 
    Properties:
      GroupDescription: "SSH and Port 80"
      VpcId: 
        Fn::ImportValue: vpc2nd
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  WebserverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows HTTP
      VpcId: 
        Fn::ImportValue: vpc2nd
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1

  EC2Private1:
    Type: AWS::EC2::Instance
    # DependsOn: PrivateSubnet1RouteTableAssociation
    Properties:
      ImageId: !Ref ec2-image
      KeyName: !Ref SSHKeyName
      InstanceType: t2.micro
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2Private1
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeleteOnTermination: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: 
            Fn::ImportValue: PrivateSubA
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum install httpd -y
          systemctl enable httpd
          echo "<h1>This is instance1</h1>" > /var/www/html/index.html
          systemctl start httpd

  EC2Private2:
    Type: AWS::EC2::Instance
    # DependsOn: PrivateSubnet2RouteTableAssociation
    Properties:
      # ImageId: !FindInMap
      #   - RegionToAmazonAMI
      #   - !Ref AWS::Region
      #   - HVM64
      ImageId: !Ref ec2-image
      KeyName: !Ref SSHKeyName
      InstanceType: t2.micro
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2Private2

      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeleteOnTermination: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId:
            Fn::ImportValue: PrivateSubB

      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install httpd -y
          systemctl enable httpd
          echo "<h1>This is instance2</h1>" > /var/www/html/index.html
          systemctl start httpd

    
  EC2Public:
    Type: AWS::EC2::Instance
    Metadata:
        AWS::CloudFormation::Init:
            configSets:
                InstallAndConfig:
                    - Install_update
                    - Install
            Install_update:
              commands:
                01_install_nginx:
                  command: "amazon-linux-extras install nginx1"
            Install:
                packages:
                    yum:
                        nginx        : []
                        gcc-c++      : []
                        pcre-devel   : []
                        zlib-devel   : []
                        make         : []
                        gd           : []
                        gd-devel     : []
                        openssl      : []
                        openssl-devel: []
                files:
                    "/usr/share/nginx/html/index.html":
                      content: |
                        <html>
                          <body>
                            <title>CloudFormed Server</title>
                            <h1>My Name</h1>
                            <h2>CloudFormed Server with CloudFormation Helper Scripts</h2>
                            <p>AWS Region =</p>
                            <p>Public DNS =</p>
                          </body>
                        </html>
                      mode: '000644'
                      owner: root
                      group: root

                    "/etc/cfn/cfn-hup.conf":
                        content: !Sub |
                            [main]
                            stack=${AWS::StackId}
                            region=${AWS::Region}
                            interval=1
                        mode: '000400'
                        owner: root
                        group: root

                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                        content: !Sub |
                            [cfn-auto-reloader-hook]
                            triggers=post.update
                            path=Resources.EC2Public.Metadata.AWS::CloudFormation::Init
                            action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Public --region ${AWS::Region} --configsets InstallAndConfig
                            runas=root
                        mode: '00400'
                        owner: root
                        group: root

                services:
                    sysvinit:
                        nginx:
                            enabled: 'true'
                            ensureRunning: 'true'
                            files:
                                - "/usr/share/nginx/html/index.html"
                            sources:
                                - "/etc/nginx/nginx.conf"
                        cfn-hup:
                            enabled: true
                            ensureRunning: true
                            files:
                                - /etc/cfn/cfn-hup.conf
                                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
        # ImageId: !FindInMap [Region2AMI, !Ref 'AWS::Region', 'AMI']
        ImageId: !Ref ec2-image
        InstanceType: t2.micro
    
        NetworkInterfaces:
            - AssociatePublicIpAddress: true
              DeviceIndex: 0
              SubnetId:
                Fn::ImportValue: PublicSubA
              GroupSet:
                - !Ref WebserverSecurityGroup
        Tags:
        - Key: Name
          Value: EC2Public -2
        # KeyName: !Ref KeyName
        UserData:
            'Fn::Base64': !Sub |
                #!/bin/bash -ex
                yum update -y
                yum install -y aws-cfn-bootstrap cloud-init aws-cli
                /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Public --region ${AWS::Region} --configsets InstallAndConfig
                # Signal the status from cfn-init (via $?)
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Public --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT15M

  # Target Group
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ApplicationLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "20"
      Targets:
        - Id: !Ref EC2Private1
          Port: 80
        - Id: !Ref EC2Private2
          Port: 80
      UnhealthyThresholdCount: 3
      HealthCheckEnabled: true
      VpcId: 
        Fn::ImportValue: vpc2nd
      Tags:
        - Key: Name
          Value: EC2TargetGroup
        - Key: Port
          Value: 80

  #ELB (ALB)
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ApplicationLoadBalancer
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing # or internal
      Subnets:
        - Fn::ImportValue: PublicSubA
        - Fn::ImportValue: PublicSubB
      SecurityGroups:
        - !Ref ELBSecurityGroup
      # SecurityGroups: [!GetAtt ELBSecurityGroup.GroupId]
Outputs:

  ALBHostName:
    Description: Aplicacion Load Balancer Hostname
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  WebURL:
    Description: URL for web page
    Value: !Sub 'http://${EC2Public.PublicIp}'


